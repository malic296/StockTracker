@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <div class="" style="width: 100%;">
        <form method="post">
             <div class="d-flex flex-nowrap overflow-auto">
                 @foreach(var ticker in Model.tickers)
                 {
                     <input type="submit" name="selectedTicker" value="@ticker" class="btn-light px-4 py-2 rounded-0 btn border-bottom-0 border-top-0 border-dark flex-grow-1 mr-2" />
                 }

             </div>
        </form>
    </div>

</div>

<div class="p-5">
    <form method="post">
        <label for="ticker" class="form-label">
            If you want to select different stock write down its ticker (TSLA, AAPL...):
        </label>
        <br />
        <input class="form-control" type="text" placeholder="ticker" name="selectedTicker" />
        <br />
        <input class="btn btn-primary" type="submit" value="submit" />
    </form>

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <h1>@Model.selectedTicker - @Model.selectedTickerFullName</h1>
            </div>
            <div class="col-md-6">
                <form method="post" class="text-end" asp-page-handler="Timespan">
                    <input type="submit" value="1Y" class="btn btn-primary" name="Timespan" />
                    <input type="submit" value="1M" class="btn btn-primary" name="Timespan" />
                    <input type="submit" value="1W" class="btn btn-primary" name="Timespan" />
                    <input type="submit" value="1D" class="btn btn-primary" name="Timespan" />
                </form>
            </div>
        </div>
    </div>

    <div class="container" style="height: 100%;">
        <div class="row">
            <div class="col-md-3 border p-3 d-flex flex-column align-items-start">
                <h2 class="mb-4">Performance [USD]</h2>
                
                @{
                    string improvement = Model.performanceData["improvement"] == "1" ? "text-success" : "text-danger";
                }
                <p class="mb-2"><strong>Starting Price:</strong> @Model.performanceData["Starting Price"] [USD]</p>
                <p class="mb-2"><strong>Current Price:</strong> @Model.performanceData["Current Price"] [USD]</p>
                <p class="mb-2"><strong>Lowest Price:</strong> @Model.performanceData["Lowest Price"] [USD]</p>
                <p class="mb-2"><strong>Highest Price:</strong> @Model.performanceData["Highest Price"] [USD]</p>
                <p class="mb-2"><strong>Price Difference: <span class="@improvement">@Model.performanceData["Price Difference"] [USD]</span></strong> </p>
                <p class="mb-2"><strong>Improvement Percentage: <span class="@improvement">@Model.performanceData["Improvement Percentage"]</span></strong> </p>
                <p class="mb-2"><strong>Starting Date:</strong> @Model.performanceData["Starting Date"]</p>
                <p class="mb-2"><strong>Current Date:</strong> @Model.performanceData["Current Date"]</p>
               
            </div>

            <div class="col-md-9">
                <div class="border p-3">
                    <canvas id="StockChart"></canvas>
                </div>
            </div>
        </div>

    </div>

    <table>

        @foreach (var item in Model.stockDataList)
        {
            <tr><td>@item.DateTime</td><td>@item.Ticker</td><td>@item.Price</td></tr>
        }

    </table>
    
</div>

<script>
  
    var stockData = [
    @foreach (var item in Model.stockDataList)
    {
        <text>
            {
                dateTime: '@item.DateTime',
                ticker: '@item.Ticker',
                price: '@item.Price'
            },
        </text>
    }
    @if (Model.stockDataList.Count > 0)
    {
        { }
    }
    ];

    var chartData = {
        labels: stockData.map(data => data.dateTime),
        datasets: [{
            label: 'Stock Price',
            borderColor: 'rgb(75, 192, 192)',
            data: stockData.map(data => parseFloat(data.price.replace(',', '.'))),
            fill: false,
            pointRadius: 0
        }]
    };


    var options = {
        responsive: true,
        maintainAspectRatio: true,
        scales: {
            x: {
                ticks: {
                    callback: function (val, index, values) {
                        let lastIndex = values.length - 1;
                        let middleIndex;

                        if(values.length % 2 == 0){
                            middleIndex = values.length / 2;
                        }
                        else{
                            middleIndex = (values.length - 1) / 2;
                        }

                        if (index === 0 || index === lastIndex || index === middleIndex) {
                            return this.getLabelForValue(val);
                        } else {
                            return '';
                        }
                    },
                    autoSkip: false,
                    maxRotation: 0,
                },
                type: 'category',
                labels: chartData.labels,
                maxTicksLimit: 2, 
                
                title: {
                    display: true,
                    text: 'Price [USD]'
                },
            },
            y: {
                title: {
                    display: true,
                    text: 'TimeLine'
                },
                beginAtZero: false,
                min: parseInt(Math.min(...chartData.datasets[0].data) - 5), 
                max: parseInt(Math.max(...chartData.datasets[0].data) + 5), 
                ticks: {
                    type: 'linear', 
                    ticks: {
                        callback: function (value, index, values) {
                            return Math.pow(10, value);
                        }
                    }
                }

            }
        }
    };

    var ctx = document.getElementById('StockChart').getContext('2d');

    var myLineChart = new Chart(ctx, {
        type: 'line',
        data: chartData,
        options: options
    });
</script>